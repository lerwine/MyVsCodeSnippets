<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define an inheritable generic read-only collection DependencyProperty</Title>
      <Shortcut>propdpcollrop</Shortcut>
      <Description>Code snippet for a generic read-only collection, writable by inheriting classes, property using DependencyProperty as the backing store</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>itemType</ID>
          <ToolTip>Collection element type</ToolTip>
          <Default>ElementType</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <Function>ClassName()</Function>
          <ToolTip>The owning class of this Property. Typically the class that it is declared in.</ToolTip>
        </Literal>
        </Declarations>
      <Code Language="csharp"><![CDATA[#region $property$ Property Members

private static readonly DependencyPropertyKey Backing$property$PropertyKey = DependencyPropertyBuilder<$ownerclass$, ObservableCollection<$itemType$>>
    .Register(nameof(Backing$property$))
    .AsReadOnly();

private static readonly DependencyPropertyKey $property$PropertyKey = DependencyPropertyBuilder<$ownerclass$, ReadOnlyObservableCollection<$itemType$>>
    .Register(nameof($property$))
    .AsReadOnly();

/// <summary>
/// Identifies the <see cref="Backing$property$"/> dependency property.
/// </summary>
protected static readonly DependencyProperty Backing$property$Property = Backing$property$PropertyKey.DependencyProperty;

/// <summary>
/// Identifies the <see cref="$property$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $property$Property = $property$PropertyKey.DependencyProperty;

/// <summary>
/// Allows read-write access to the backing <see cref="ObservableCollection<$itemType$>"/> for <see cref="$property$"/>.
/// </summary>
/// <value>The backing <see cref="ObservableCollection<$itemType$>"/> for <see cref="$property$"/>.</value>
protected ObservableCollection<$itemType$> Backing$property$ => (ObservableCollection<$itemType$>)GetValue(Backing$property$Property);

public ReadOnlyObservableCollection<$itemType$> $property$ => (ReadOnlyObservableCollection<$itemType$>)GetValue($property$Property);

#endregion
// TODO: Add initialization code to constructor: $end$Backing$property$ = new();
// TODO: Add initialization code to constructor: SetValue($property$PropertyKey, new ReadOnlyObservableCollection<$itemType$>(Backing$property$));]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
