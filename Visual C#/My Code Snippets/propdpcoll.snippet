<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define a generic collection DependencyProperty</Title>
      <Shortcut>propdpcoll</Shortcut>
      <Description>Code snippet for a generic collection property using DependencyProperty as the backing store</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>itemType</ID>
          <ToolTip>Collection element type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>collType</ID>
          <ToolTip>Generic collection type</ToolTip>
          <Default>ObservableCollection</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <Function>ClassName()</Function>
          <ToolTip>The owning class of this Property.  Typically the class that it is declared in.</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="csharp">
<![CDATA[
private static readonly DependencyPropertyKey $property$PropertyKey =
    DependencyProperty.RegisterReadOnly(nameof($property$), typeof($collType$<$itemType$>), typeof($ownerclass$),
        new PropertyMetadata(new $collType$<$itemType$>()));

public static readonly DependencyProperty $property$Property = $property$PropertyKey.DependencyProperty;

public $collType$<$itemType$> $property$
{
    get { return ($collType$<$itemType$>)this.GetValue($property$Property); }
    private set { this.SetValue($property$PropertyKey, value); }
}
$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
