<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define a relay command property</Title>
      <Shortcut>proprelaycmd</Shortcut>
      <Description>Code snippet for a relay command property.</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>command</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>MyClick</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <Function>ClassName()</Function>
          <ToolTip>The owning class of this Property. Typically the class that it is declared in.</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[#region $command$ Command Property Members

private static readonly DependencyPropertyKey $command$PropertyKey = DependencyProperty.RegisterReadOnly(nameof($command$), typeof(Commands.RelayCommand), typeof($ownerclass$));

/// <summary>
/// Identifies the <see cref="$command$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $command$Property = $command$PropertyKey.DependencyProperty;

public Commands.RelayCommand $command$ => (Commands.RelayCommand)GetValue($command$Property);

/// <summary>
/// Called when the <see cref="$command$">$command$ Command</see> is invoked.
/// </summary>
/// <param name="parameter">The parameter value that was passed to the <see cref="System.Windows.Input.ICommand.Execute(object)"/> method on <see cref="$command$" />.</param>
protected virtual void On$command$Command(object parameter)
{
  // TODO: Implement On$command$Command Logic
  // TODO: Add initialization code to constructor: $end$SetValue($command$PropertyKey, new Commands.RelayCommand(On$command$Command));
}

#endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
