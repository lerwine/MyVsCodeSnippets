<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define a string DependencyProperty with a protected "OnPropertyChanged" method.</Title>
      <Shortcut>propdpsc</Shortcut>
      <Description>Code snippet for a string property using DependencyProperty as the backing store with a protected "OnPropertyChanged" method.</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <Function>ClassName()</Function>
          <ToolTip>The owning class of this Property. Typically the class that it is declared in.</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[#region $property$ Property Members

/// <summary>
/// Identifies the <see cref="$property$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $property$Property = DependencyPropertyBuilder<$ownerclass$, string>
    .Register(nameof($property$))
    .DefaultValue("")
    .OnChanged((d, oldValue, newValue) => (d as $ownerclass$)?.On$property$PropertyChanged(oldValue, newValue))
    .CoerseWith(NonWhiteSpaceOrEmptyStringCoersion.Default)
    .AsReadWrite();

public string $property$ { get => GetValue($property$Property) as string; set => SetValue($property$Property, value); }

/// <summary>
/// Called when the value of the <see cref="$property$"/> dependency property has changed.
/// </summary>
/// <param name="oldValue">The previous value of the <see cref="$property$"/> property.</param>
/// <param name="newValue">The new value of the <see cref="$property$"/> property.</param>
protected virtual void On$property$PropertyChanged(string oldValue, string newValue)
{
    $end$// TODO: Implement On$property$PropertyChanged Logic
}

#endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
