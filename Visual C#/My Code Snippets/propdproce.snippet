<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define a read-only DependencyProperty with a &quot;DependencyPropertyChanged&quot; event.</Title>
      <Shortcut>propdproce</Shortcut>
      <Description>Code snippet for a read-only property using DependencyProperty as the backing store with a &quot;DependencyPropertyChanged&quot; event.</Description>
      <Author>Leonard T. Erwine</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>PropertyType</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <Function>ClassName()</Function>
          <ToolTip>The owning class of this Property. Typically the class that it is declared in.</ToolTip>
        </Literal>
        <Literal>
          <ID>defaultvalue</ID>
          <ToolTip>The default value for this property.</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[#region $property$ Property Members

/// <summary>
/// Occurs when the value of the <see cref="$property$"/> dependency property has changed.
/// </summary>
public event DependencyPropertyChangedEventHandler $property$PropertyChanged;

private static readonly DependencyPropertyKey $property$PropertyKey = DependencyProperty.RegisterReadOnly(nameof($property$), typeof($type$), typeof($ownerclass$),
        new PropertyMetadata($defaultvalue$, (DependencyObject d, DependencyPropertyChangedEventArgs e) => (d as $ownerclass$)?.Raise$property$PropertyChanged(e)));

/// <summary>
/// Identifies the <see cref="$property$"/> dependency property.
/// </summary>
public static readonly DependencyProperty $property$Property = $property$PropertyKey.DependencyProperty;

public $type$ $property$ { get => ($type$)GetValue($property$Property); private set => SetValue($property$PropertyKey, value); }

/// <summary>
/// Called when the <see cref="PropertyChangedCallback">PropertyChanged</see> event on <see cref="$property$Property"/> is raised.
/// </summary>
/// <param name="args">The Event data that is issued by the event on <see cref="$property$Property"/> that tracks changes to its effective value.</param>
protected void Raise$property$PropertyChanged(DependencyPropertyChangedEventArgs args)
{
    try { On$property$PropertyChanged(($type$)args.OldValue, ($type$)args.NewValue); }
    finally { $property$PropertyChanged?.Invoke(this, args); }
}

/// <summary>
/// Called when the value of the <see cref="$property$"/> dependency property has changed.
/// </summary>
/// <param name="oldValue">The previous value of the <see cref="$property$"/> property.</param>
/// <param name="newValue">The new value of the <see cref="$property$"/> property.</param>
protected virtual void On$property$PropertyChanged($type$ oldValue, $type$ newValue)
{
    $end$// TODO: Implement On$property$PropertyChanged Logic
}

#endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
